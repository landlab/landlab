.. _dev_releases:

===============================
How to create a Landlab release
===============================

The Release Checklist
---------------------

1. Start by updating the tutorials repository. To do this, locally checkout
   the tutorials repo and merge `landlab/tutorials/next` into
   `landlab/tutorials/release`. Push these changes to the tutorials remote.
   **Note: The CI may fail for the tutorials repository at first.**

2. Next go to GitHub and use it to create a pull request that brings the
   changes associated with `landlab/landlab/master` into
   `landlab/landlab/release`. This pull request will include testing the
   `release` version of the source code against the `release` version of the
   tutorials repository.

3. Assuming the continuous integration from step 3 passes, merge the pull
   request into `landlab/landlab/release`.

4. Next, decide what new version number is appropriate
   based on `Semantic Versioning <https://semver.org/>`_.

   This can either be done locally or on the GitHub website. Here are
   instructions to do this locally:

   In the `landlab/landlab` repository, checkout the release branch and tag it.

   .. code-block:: bash

      $ git tag vX.X.X

   Then, push your tag on `landlab\landlab\release` to the remote.

   .. code-block:: bash

      $ git push --tags

5. This will trigger both standard Landlab CI and a deploy stage that uploads
   wheels to PyPI. A new PR will be autogenerated in the landlab-feedstock on
   conda-forge.

   * Assuming its tests pass, merge the PR autogenerated in the landlab-feedstock.

   * Verify the builds on PyPI and on conda-forge.

6. Once the builds are available, go to the tutorials repo and tag the
   `landlab\tutorial\release` branch with the same number you used for the main
   repo. You can do this locally or with GitHub's website.

   Verify that these builds pass in the tutorials repository.

7. Finally, we need to increment the dirty version number on the branches
   `landlab\tutorial\next` and `landlab\landlab\master`.

   In the tutorials repository (`landlab\tutorials`):

   .. code-block:: bash

      $ git checkout next
      $ git merge release
      $ git push

   In the source code repository (`landlab\landlab`):

   .. code-block:: bash

      $ git checkout master
      $ git merge release
      $ git push

Notes
-----

New releases are built and uploaded to
`Anaconda.org <https://anaconda.org/landlab/landlab>`_ whenever a new tag
that starts with the letter ``v`` is
`created and pushed to <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_
`GitHub <https://github.com/landlab/landlab>`_. As an example, the following
will cause a new release to be built:

.. code-block:: bash

   $ git tag v0.1.1 # Create the tag locally
   $ git push --tags # Push the tag to the remote

A new release is created (``v0.1.1``) and the tag pushed to GitHub.
`Travis-CI <https://travis-ci.org/landlab/landlab>`_ notices the tagged commit,
and after building and testing the package, creates a fresh new package that
is uploaded to `Anaconda.org <https://anaconda.org/landlab/landlab>`_.

.. note::

  Although you can create such a tag on any branch, releases should **only**
  come from the ``release`` branch. Make sure that when you create a tag
  you are doing so on ``release`` (and all your changes are committed).

A couple notes about creating a new version:

1. Landlab follows `Semantic Versioning <https://semver.org/>`_
   rules for version assignment and formatting. Please stick to them.

2. If you mess up (forget to update all the version strings scattered
   throughout the code, for example), you can always `delete the tag and
   recreate it <https://git-scm.com/docs/git-tag>`_. To do this, you'll
   need to delete both the remote tag and the local tag.

   .. code-block:: bash

      $ git push --delete origin <tagname> # Delete the tag on the remote repository
      $ git tag --delete <tagname> # Delete the tag from the local repository

   where ``<tagname>`` is the name of your tag (``v0.1.1``, for example).

3. If your new tag was successfully pushed to GitHub, you will be able to see
   it with the rest of the
   `releases <https://github.com/landlab/landlab/releases>`_ and
   `tags <https://github.com/landlab/landlab/tags>`_.

4. To see if your new release was created successfully, you can do one or all
   of the following:

   *  Check the logs for the build of your tagged commit on
      `Travis-CI <https://travis-ci.org/landlab/landlab>`_.
   *  Check `Anaconda.org <https://anaconda.org/landlab/landlab>`_ to see
      if your release appears there.
   *  Check if `conda` can see your new release with
      ``conda search landlab -c landlab``. See the
      `conda docs <https://docs.conda.io/en/latest/>`_
      for a description of ``conda`` and how to use it, or you can always use
      ``conda -h`` from the command line.

Helpful links
-------------

1. `Using conda <https://docs.conda.io/en/latest/>`_: What
   `conda` is and how to use it.
2. `git tags <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_: What git
   tags are and how to create them.
3. `The git tag command <https://git-scm.com/docs/git-tag>`_: A description
   of all of the options for the `git tag` command (including `git tag
   --delete`).
4. `landlab on Travis <https://travis-ci.org/landlab/landlab>`_: The latest
   Travis builds of landlab.
5. `landlab on Anaconda <https://anaconda.org/landlab/landlab>`_: The
   conda packages for landlab releases.
6. `Semantic Versioning <https://semver.org/>`_: Rules for assigning and
   formatting versions.
