.. _dev_releases:

===============================
How to create a Landlab release
===============================

The Release Checklist
---------------------

1. Make sure you are on the ``release`` branch of the Landlab codebase repo.

   .. code-block:: bash

      $ git checkout release

2. Merge ``master`` into release.

.. code-block:: bash

   $ git merge master

3. Before tagging, you need to ensure that this update will work with the
   tutorials repo. To do this, locally checkout the tutorials repo and
   merge `landlab/tutorials/next` into `landlab/tutorials/release`. Verify that
   this works with your new local version of `landlab/landlab/release`.

4. If it works locally, then push your changes to the `landlab/landlab/release`
   and `landlab/tutorials/release` branches to the remotes **WITHOUT TAGGING**.
   This will trigger continuous integration on the `landlab/landlab` repo that
   must pass before proceeding. The testing on `landlab/tutorials` may fail
   because the release has not yet been distributed.

5. Assuming that the CI passes, decide what new version number is appropriate
   based on `Semantic Versioning <https://semver.org/>`_. Tag the release
   branch with the version number. In the `landlab/landlab` repository,
   checkout the release branch and tag it.

   .. code-block:: bash

      $ git tag vX.X.X

6. Push your tag on `landlab\landlab\release` to the remote.

   .. code-block:: bash

      $ git push --tags

6. Wait for the Landlab CI to finish. It will trigger uploading of wheels to
   PyPI and builds within the landlab-feedstock on conda-forge.

7. Merge the PR autogenerated in the landlab-feedstock.

8. Verify the builds on PyPI and on conda-forge.

9. Once the builds are available, go to the tutorials repo and tag the
   `landlab\tutorial\release` branch with the same number you used for the main
   repo. Finally, merge `landlab\tutorial\release` into `landlab\tutorial\next`
   to increment the tagged version. Verify that these CI builds have passed.

    .. code-block:: bash

       $ git checkout release
       $ git tag vX.X.X
       $ git push --tags
       $ git checkout master
       $ git merge release
       $ git push

10. Checkout ``landlab\landlab\master`` and merge ``landlab\landlab\release``
   into it. This increments the tagged version.

.. code-block:: bash

   $ git checkout master
   $ git merge release
   $ git push

Notes
-----

New releases are built and uploaded to
`Anaconda.org <https://anaconda.org/landlab/landlab>`_ whenever a new tag
that starts with the letter ``v`` is
`created and pushed to <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_
`GitHub <https://github.com/landlab/landlab>`_. As an example, the following
will cause a new release to be built:

.. code-block:: bash

    $ git tag v0.1.1 # Create the tag locally
    $ git push --tags # Push the tag to the remote

A new release is created (``v0.1.1``) and the tag pushed to GitHub.
`Travis-CI <https://travis-ci.org/landlab/landlab>`_ notices the tagged commit,
and after building and testing the package, creates a fresh new package that
is uploaded to `Anaconda.org <https://anaconda.org/landlab/landlab>`_.

.. note::

  Although you can create such a tag on any branch, releases should **only**
  come from the ``release`` branch. Make sure that when you create a tag
  you are doing so on ``release`` (and all your changes are committed).

A couple notes about creating a new version:

1. Landlab follows `Semantic Versioning <https://semver.org/>`_
   rules for version assignment and formatting. Please stick to them.

2. If you mess up (forget to update all the version strings scattered
   throughout the code, for example), you can always `delete the tag and
   recreate it <https://git-scm.com/docs/git-tag>`_. To do this, you'll
   need to delete both the remote tag and the local tag.

   .. code-block:: bash

      $ git push --delete origin <tagname> # Delete the tag on the remote repository
      $ git tag --delete <tagname> # Delete the tag from the local repository

   where ``<tagname>`` is the name of your tag (``v0.1.1``, for example).

3. If your new tag was successfully pushed to GitHub, you will be able to see
   it with the rest of the
   `releases <https://github.com/landlab/landlab/releases>`_ and
   `tags <https://github.com/landlab/landlab/tags>`_.

4. To see if your new release was created successfully, you can do one or all
   of the following:

   *  Check the logs for the build of your tagged commit on
      `Travis-CI <https://travis-ci.org/landlab/landlab>`_.
   *  Check `Anaconda.org <https://anaconda.org/landlab/landlab>`_ to see
      if your release appears there.
   *  Check if `conda` can see your new release with
      ``conda search landlab -c landlab``. See the
      `conda docs <https://docs.conda.io/en/latest/>`_
      for a description of ``conda`` and how to use it, or you can always use
      ``conda -h`` from the command line.

Helpful links
-------------

1. `Using conda <https://docs.conda.io/en/latest/>`_: What
   `conda` is and how to use it.
2. `git tags <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_: What git
   tags are and how to create them.
3. `The git tag command <https://git-scm.com/docs/git-tag>`_: A description
   of all of the options for the `git tag` command (including `git tag
   --delete`).
4. `landlab on Travis <https://travis-ci.org/landlab/landlab>`_: The latest
   Travis builds of landlab.
5. `landlab on Anaconda <https://anaconda.org/landlab/landlab>`_: The
   conda packages for landlab releases.
6. `Semantic Versioning <https://semver.org/>`_: Rules for assigning and
   formatting versions.
