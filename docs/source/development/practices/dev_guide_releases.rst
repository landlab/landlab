.. _dev_releases:

===============================
How to create a Landlab release
===============================

The Release Checklist
---------------------

1. Start by updating the tutorials repository. To do this, locally checkout
   the tutorials repo and merge `landlab/tutorials/next` into
   `landlab/tutorials/release`.

   Edit the commit message to include `[skip ci]` and push these changes to the
   tutorials remote.

   **Note: We add the `[skip ci]` because if there are changes in
   `landlab/landlab/master` that are not yet in a distributed version of
   landlab, we do not expect the tutorials repository to pass continuous
   integration.**

2. Next go to GitHub and use it to create a pull request that brings the
   changes associated with `landlab/landlab/master` into
   `landlab/landlab/release`. This pull request will include testing the
   `release` version of the source code against the `release` version of the
   tutorials repository.

3. Assuming the continuous integration from step 2 passes, merge the pull
   request into `landlab/landlab/release`.

4. Next, decide what new version number is appropriate
   based on `Semantic Versioning <https://semver.org/>`_.

   This can either be done locally or on the GitHub website. Here are
   instructions to do this locally:

   In the `landlab/landlab` repository, checkout the release branch and tag it.

   .. code-block:: bash

      $ git tag vX.X.X

   Then, push your tag on `landlab\landlab\release` to the remote.

   .. code-block:: bash

      $ git push --tags

5. This will trigger both standard Landlab CI and a deploy stage that uploads
   wheels to PyPI. A new PR will be autogenerated in the landlab-feedstock on
   conda-forge.

   * Assuming its tests pass, merge the PR autogenerated in the landlab-feedstock.

   * Verify the builds on PyPI and on conda-forge.

6. Once the builds are available, go to the tutorials repo and tag the
   `landlab\tutorial\release` branch with the same number you used for the main
   repo. You can do this locally or with GitHub's website.

   Verify that these builds pass in the tutorials repository. If they do, you
   are done.

Notes
-----

1. Although you can create such a tag on any branch, releases should **only**
   come from the ``release`` branch. Make sure that when you create a tag
   you are doing so on ``release`` (and all your changes are committed).

2. Landlab follows `Semantic Versioning <https://semver.org/>`_
   rules for version assignment and formatting. Please stick to them.


Helpful links
-------------

1. `Using conda <https://docs.conda.io/en/latest/>`_: What
   `conda` is and how to use it.
2. `git tags <https://git-scm.com/book/en/v2/Git-Basics-Tagging>`_: What git
   tags are and how to create them.
3. `The git tag command <https://git-scm.com/docs/git-tag>`_: A description
   of all of the options for the `git tag` command (including `git tag
   --delete`).
4. `landlab on Travis <https://travis-ci.org/landlab/landlab>`_: The latest
   Travis builds of landlab.
5. `landlab on Anaconda <https://anaconda.org/landlab/landlab>`_: The
   conda packages for landlab releases.
6. `Semantic Versioning <https://semver.org/>`_: Rules for assigning and
   formatting versions.
