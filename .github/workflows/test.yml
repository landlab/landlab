name: Test

on:
  - push
  - pull_request

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-tag:
    # Run on external PRs, but not on internal PRs, to avoid duplicate runs
    if: |
      github.event_name == 'push' ||
      github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest
    outputs:
      publish_url: ${{ steps.check-publish.outputs.publish_url }}

    steps:
      - name: Check if this is a release/prerelease
        id: check-publish
        run: |
          tag_name="${GITHUB_REF#refs/tags/}"
          if [[ "$tag_name" =~ ^v[0-9]+\.[0-9]+\.[0-9]+[ab][0-9]+$ ]]; then
            publish_url="https://test.pypi.org/legacy/"
          elif [[ "$tag_name" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            publish_url="https://upload.pypi.org/legacy/"
          else
            publish_url="none"
          fi
          echo "publish_url=$publish_url" >> "$GITHUB_OUTPUT"
          echo "tag_name=$tag_name"
          echo "publish_url=$publish_url"

  build-sdist:
    name: Build source distribution
    needs: check-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: build-sdist
          path: ${{ github.workspace }}/dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.cibw-only }}
    needs: check-tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-13, cibw-only: cp311-macosx_x86_64 }
          - { os: macos-13, cibw-only: cp312-macosx_x86_64 }
          - { os: macos-13, cibw-only: cp313-macosx_x86_64 }
          - { os: macos-14, cibw-only: cp311-macosx_arm64 }
          - { os: macos-14, cibw-only: cp312-macosx_arm64 }
          - { os: macos-14, cibw-only: cp313-macosx_arm64 }
          - { os: ubuntu-24.04, cibw-only: cp311-manylinux_x86_64 }
          - { os: ubuntu-24.04, cibw-only: cp312-manylinux_x86_64 }
          - { os: ubuntu-24.04, cibw-only: cp313-manylinux_x86_64 }
          - { os: ubuntu-24.04-arm, cibw-only: cp311-manylinux_aarch64 }
          - { os: ubuntu-24.04-arm, cibw-only: cp312-manylinux_aarch64 }
          - { os: ubuntu-24.04-arm, cibw-only: cp313-manylinux_aarch64 }
          - { os: windows-2022, cibw-only: cp311-win_amd64 }
          - { os: windows-2022, cibw-only: cp312-win_amd64 }
          - { os: windows-2022, cibw-only: cp313-win_amd64 }

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-bdist/
        with:
          cibw-only: ${{ matrix.cibw-only }}
          upload-name: build-wheels-${{ matrix.cibw-only }}

  test-landlab:
    name: Run the tests
    needs: build-wheels
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
        pytest-marker: ["slow", "not slow"]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/run-tests/
        with:
          python-version: ${{ matrix.python-version }}
          nox-session: "test"
          pytest-addopts: "-m '${{ matrix.pytest-marker }} and not richdem'"
          codecov-token: ${{ secrets.CODECOV_TOKEN }}

  test-notebooks:
    name: Run the notebooks
    needs: build-wheels
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ["3.13"]
        pytest-marker: ["slow", "not slow"]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/run-notebooks/
        with:
          python-version: ${{ matrix.python-version }}
          nox-session: "test-notebooks"
          pytest-addopts: "--overwrite -m '${{ matrix.pytest-marker }} and not richdem'"
          opentopography-api-key: ${{ secrets.OPENTOPOGRAPHY_API_KEY }}
          upload-name: ${{ matrix.os == 'macos-latest' && format('notebooks-{0}', matrix.pytest-marker) || '' }}


  test-richdem:
    needs: build-wheels
    name: Run the richdem tests

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-variant: Miniforge3
          miniforge-version: latest
          auto-update-conda: true
          channels: conda-forge,defaults

      - uses: actions/download-artifact@v4
        name: Download build artifacts
        with:
          pattern: "build-wheels-*"
          merge-multiple: true
          path: ${{ github.workspace }}/dist

      - name: Test
        env:
          OPENTOPOGRAPHY_API_KEY: ${{ secrets.OPENTOPOGRAPHY_API_KEY }}
          MPLBACKEND: "module://matplotlib_inline.backend_inline"
          PYTEST_ADDOPTS: "--overwrite"
        run: |
          pip install matplotlib_inline
          pip install nox
          nox --verbose -s test-richdem \
              --force-pythons=${{ matrix.python-version }} \
              -- dist/

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  check-links:
    needs: check-tag
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Check documentation links
        run: |
          pip install nox
          nox -s docs-check-links

  docs:
    needs: test-notebooks
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - uses: actions/download-artifact@v4
        name: Download build artifact
        with:
          pattern: notebooks-*
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R

      - name: Install Pandoc
        run: sudo apt-get update && sudo apt-get install -y pandoc

      - name: Build documentation
        run: |
          pip install nox
          nox -s docs-build

      - name: Upload static files as artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/html/

  deploy-docs:
    if: github.ref == 'refs/heads/master'
    needs: docs
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish:
    needs:
      - check-tag
      - test-landlab
      - test-notebooks
      - test-richdem
      - build-sdist
    name: "Publish to PyPI/TestPyPI"
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "build-*"
          merge-multiple: true
          path: ${{ github.workspace }}/dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ startsWith(needs.check-tag.outputs.publish_url, 'http') }}
        with:
          repository-url: ${{ needs.check-tag.outputs.publish_url }}
          skip-existing: true
          print-hash: true
          verify-metadata: false
